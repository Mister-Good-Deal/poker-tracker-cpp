stages:
  - build
  - check
  - lint
  - test
  - packaging
  - deploy

variables:
  PROJECT_PATH: $CI_PROJECT_DIR
  BUILD_TYPE: Release
  BUILD_PATH_LINUX: ${PROJECT_PATH}/build-linux
  BUILD_PATH_WINDOWS: ${PROJECT_PATH}/build-windows
  MAX_CODE_QUALITY_ISSUE_PER_FILE: 20

default:
  image: registry.gitlab.laneuville.me/rom1/poker-bot/builder-linux-clang-ci:latest
  tags:
    - host
    - runner
  cache:
    # Enable per-branch caching
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH_LINUX

# This job builds the Linux version of the application with the Release configuration
build_linux:
  stage: build
  image: registry.gitlab.laneuville.me/rom1/poker-bot/builder-linux-gcc:latest
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX -DCMAKE_BUILD_TYPE=$BUILD_TYPE && cmake --build $BUILD_PATH_LINUX
  artifacts:
    paths:
      - $BUILD_PATH_LINUX
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-windows\-only/m
      when: never
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
  variables:
    BUILD_TYPE: Release

# This job builds the Linux version of the application with the Debug configuration
build_linux_debug:
  stage: build
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS=1
      -DCMAKE_EXPORT_COMPILE_COMMANDS=ON --log-context && cmake --build $BUILD_PATH_LINUX
  artifacts:
    paths:
      - $BUILD_PATH_LINUX
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_BRANCH =~/^(feature|hotfix)/
  variables:
    BUILD_TYPE: Debug

# This job is responsible for building the project for the Windows platform using MinGW Makefiles. It uses the
# 'builder-windows-mingw' image and sets the 'CMAKE_SYSTEM_NAME' to 'Windows' during configuration. It also sets the
# 'BUILD_TYPE' to 'Release' and saves the artifacts generated in the build process.
build_windows:
  stage: build
  image: registry.gitlab.laneuville.me/rom1/poker-bot/builder-windows-mingw:latest
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_WINDOWS -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_TOOLCHAIN_FILE=cmake/mingw-w64-x86_64.cmake && cmake --build $BUILD_PATH_WINDOWS
  artifacts:
    paths:
      - $BUILD_PATH_WINDOWS
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-windows/m
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m

# This job runs the clang-check tool to analyze the source code and generates a report in clang-check-report.plist
clang_check:
  stage: check
  script:
    - CPP_SRC_FILES=$(find ${PROJECT_PATH}/services -regex '.*\.\(cpp\|hpp\)' | tr "\n" " ")
    - echo "CPP_SRC_FILES=${CPP_SRC_FILES}" >> vars.env
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS=1 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - clang-check -analyze -extra-arg=-std=c++20 -p $BUILD_PATH_LINUX --analyzer-output-path=${PROJECT_PATH}/clang-check-report.plist ${CPP_SRC_FILES}
  artifacts:
    reports:
      dotenv: vars.env
    paths:
      - clang-check-report.plist
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-lint/m || $CI_COMMIT_MESSAGE !~ /\/no\-code\-quality/m || $CI_COMMIT_MESSAGE !~ /\/no\-test/m

# This job is responsible for running clang-format on the project source files and checking if the code formatting
# adheres to the project's code style. It uses the 'builder-linux-clang' image and checks the code formatting using the
# '--Werror' and '--Wclang-format-violations' options.
clang_format:
  stage: lint
  script:
    - clang-format --Werror --Wclang-format-violations --dry-run $CPP_SRC_FILES
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-lint/m
  needs:
    - clang_check

code_quality:
  stage: test
  tags:
    - code-quality
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS=1 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON --log-context
    - CodeChecker analyze $BUILD_PATH_LINUX/compile_commands.json -o $BUILD_PATH_LINUX/code_checker_report -j 8 --ctu --tidy-config $PROJECT_PATH/.clang-tidy
    - set +e
    - CodeChecker parse $BUILD_PATH_LINUX/code_checker_report -e html -o $BUILD_PATH_LINUX/code_checker_html_report --trim-path-prefix $PROJECT_PATH
    - CodeChecker parse $BUILD_PATH_LINUX/code_checker_report -e codeclimate -o $BUILD_PATH_LINUX/gl-code-quality-report.json --trim-path-prefix $PROJECT_PATH
    - exit 0
  artifacts:
    name: code_quality_${CI_COMMIT_TIMESTAMP}
    paths:
      - $BUILD_PATH_LINUX/gl-code-quality-report.json
      - $BUILD_PATH_LINUX/code_checker_html_report/
    expose_as: 'Code quality HTML and json reports'
    reports:
      codequality: $BUILD_PATH_LINUX/gl-code-quality-report.json
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-code\-quality/m
  needs:
    - clang_check

# This job is responsible for building and running all game_handler tests. It uses the CTest framework to run the
# tests and generates a JUnit-style report for GitLab to display the test results.
test_game_handler:
  stage: test
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX -DBUILD_TESTS=1 -DCMAKE_BUILD_TYPE=$BUILD_TYPE && cmake --build $BUILD_PATH_LINUX
    # @fixme Need to required tests for all subproject with --test-dir
    - ctest --test-dir $BUILD_PATH_LINUX/services/game_handler --output-on-failure --extra-verbose -j $(nproc)
      --output-junit game_handler_ctest.xml --no-compress-output
  artifacts:
    reports:
      junit: $BUILD_PATH_LINUX/services/game_handler/game_handler_ctest.xml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-test/m
  needs:
    - clang_check

test_ocr:
  stage: test
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX -DBUILD_TESTS=1 -DCMAKE_BUILD_TYPE=$BUILD_TYPE && cmake --build $BUILD_PATH_LINUX
    # @fixme Need to required tests for all subproject with --test-dir
    - ctest --test-dir $BUILD_PATH_LINUX/services/ocr --output-on-failure --extra-verbose -j $(nproc) --output-junit ocr_ctest.xml --no-compress-output
  artifacts:
    reports:
      junit: $BUILD_PATH_LINUX/services/ocr/ocr_ctest.xml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-test/m
  needs:
    - clang_check

packaging_linux:
  stage: packaging
  image: registry.gitlab.laneuville.me/rom1/poker-bot/builder-linux-gcc:latest
  script:
    - cpack --config $BUILD_PATH_LINUX/CPackConfig.cmake
  artifacts:
    paths:
      - $BUILD_PATH_LINUX/poker-bot*.tar.gz
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
  needs:
    - build_linux

packaging_windows:
  stage: packaging
  image: registry.gitlab.laneuville.me/rom1/poker-bot/builder-windows-mingw:latest
  script:
    - cpack --config $BUILD_PATH_WINDOWS/CPackConfig.cmake
  artifacts:
    paths:
      - $BUILD_PATH_WINDOWS/poker-bot*.zip
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
  needs:
    - build_windows

# This job is responsible for packaging the built artifacts from the previous build jobs and deploying them to the
# desired target.
deploy:
  stage: deploy
  image: registry.gitlab.laneuville.me/rom1/poker-bot/deploy:latest
  script:
    # For fetching the tags with the following `git describe`
    - git fetch --unshallow && git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git fetch origin
    - NEW_VERSION=$(cat VERSION.txt)
    - GIT_VERSION=$(git describe --tags | grep -P '\d+\.\d+\.\d+' -o)
    - if [ "${NEW_VERSION}" = "`echo -e "${NEW_VERSION}\n${GIT_VERSION}" | sort -V | head -n1`" ]; then
      echo "VERSION.txt (${NEW_VERSION}) is lower or equals to current git version tag (${GIT_VERSION})." && exit 1
      fi
    - echo "Creating release for ${CI_PROJECT_NAME} v${NEW_VERSION}"
    - gitlab-artifacts download build_windows build_linux
    - git tag ${NEW_VERSION}
    - git push --tags
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
      when: manual
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
  needs:
    - packaging_linux
    - packaging_windows
