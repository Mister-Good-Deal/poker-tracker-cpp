stages:
  - build
  - lint
  - test
  - test-long-running
  - documentation
  - packaging
  - deploy

variables:
  PROJECT_PATH: $CI_PROJECT_DIR
  BUILD_PATH: ${PROJECT_PATH}/build
  MAX_CODE_QUALITY_ISSUE_PER_FILE: 20
  MAX_MULTI_THREADS_CORE: 8

default:
  image: registry.gitlab.laneuville.me/poker-bot/backend/ci-linux-runner:latest
  tags:
    - host
    - runner

build_gcc:
  stage: build
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-linux-gcc:latest
  tags:
    - build
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/gcc/release
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH/gcc/release -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DBUILD_TESTS=ON
    - cmake --build $BUILD_PATH/gcc/release --parallel ${MAX_MULTI_THREADS_CORE}
  artifacts:
    paths:
      - $BUILD_PATH/gcc/release
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-windows\-only/m
      when: never
    - if: $CI_COMMIT_BRANCH =~ /^(main|release|feature)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
      
build_clang:
  stage: build
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-linux-clang:latest
  tags:
    - build
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/clang/release
      - $BUILD_PATH/clang/debug
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH/clang/release -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DBUILD_TESTS=ON
    - cmake --build $BUILD_PATH/clang/release --parallel ${MAX_MULTI_THREADS_CORE}
    - cmake -S $PROJECT_PATH -B $BUILD_PATH/clang/debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DBUILD_TESTS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON --log-context
    - cmake --build $BUILD_PATH/clang/debug --parallel ${MAX_MULTI_THREADS_CORE}
  artifacts:
    paths:
      - $BUILD_PATH/clang/release
      - $BUILD_PATH/clang/debug
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-windows\-only/m
      when: never
    - if: $CI_COMMIT_BRANCH =~ /^(main|release|feature)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m

build_mingw:
  stage: build
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-linux-mingw:latest
  tags:
    - build
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH/mingw/release -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_TOOLCHAIN_FILE=cmake/mingw-w64-x86_64.cmake
    - cmake --build $BUILD_PATH/mingw/release --parallel ${MAX_MULTI_THREADS_CORE}
    - cmake -S $PROJECT_PATH -B $BUILD_PATH/mingw/debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_TOOLCHAIN_FILE=cmake/mingw-w64-x86_64.cmake
    - cmake --build $BUILD_PATH/mingw/debug --parallel ${MAX_MULTI_THREADS_CORE}
  artifacts:
    paths:
      - $BUILD_PATH/mingw/release
      - $BUILD_PATH/mingw/debug
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-windows/m
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m

clang_format:
  stage: lint
  script:
    - CPP_SRC_FILES=$(find ${PROJECT_PATH}/services -regex '.*\.\(cpp\|hpp\)' | tr "\n" " ")
    - clang-format --Werror --Wclang-format-violations --dry-run $CPP_SRC_FILES
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-lint/m

code_quality:
  stage: test
  tags:
    - code-quality
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/clang/debug
  script:
    - CodeChecker analyze $BUILD_PATH/clang/debug/compile_commands.json -o $BUILD_PATH/clang/debug/code_checker_report
      -j ${MAX_MULTI_THREADS_CORE} --ctu --tidy-config $PROJECT_PATH/.clang-tidy --skip $PROJECT_PATH/.code-checker-skip-files
    - set +e
    - CodeChecker parse $BUILD_PATH/clang/debug/code_checker_report -e html -o $BUILD_PATH/clang/debug/code_checker_html_report --trim-path-prefix $PROJECT_PATH
    - CodeChecker parse $BUILD_PATH/clang/debug/code_checker_report -e codeclimate -o $BUILD_PATH/clang/debug/gl-code-quality-report.json --trim-path-prefix $PROJECT_PATH
    - exit 0
  artifacts:
    name: code_quality_${CI_COMMIT_TIMESTAMP}
    paths:
      - $BUILD_PATH/clang/debug/gl-code-quality-report.json
      - $BUILD_PATH/clang/debug/code_checker_html_report/
    expose_as: 'Code quality HTML and json reports'
    reports:
      codequality: $BUILD_PATH/clang/debug/gl-code-quality-report.json
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-code\-quality/m
  needs:
    - build_clang

test_game_handler:
  stage: test
  tags:
    - tests
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/gcc/release
  script:
    - ctest --test-dir $BUILD_PATH/gcc/release/services/game_handler --output-on-failure --extra-verbose -j ${MAX_MULTI_THREADS_CORE}
      --output-junit game_handler_ctest.xml --no-compress-output
  artifacts:
    reports:
      junit: $BUILD_PATH/gcc/release/services/game_handler/game_handler_ctest.xml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-test/m
  needs:
    - build_gcc

test_ocr:
  stage: test
  tags:
    - tests
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/gcc/release
  script:
    - ctest --test-dir $BUILD_PATH/gcc/release/services/ocr --output-on-failure --extra-verbose -j ${MAX_MULTI_THREADS_CORE}
      --output-junit ocr_ctest.xml --no-compress-output
  artifacts:
    reports:
      junit: $BUILD_PATH/gcc/release/services/ocr/ocr_ctest.xml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-test/m
  needs:
    - build_gcc
      
test_scraper:
  stage: test
  tags:
    - tests
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/gcc/release
  script:
    - ctest --test-dir $BUILD_PATH/gcc/release/services/scraper --output-on-failure --extra-verbose -j ${MAX_MULTI_THREADS_CORE}
      --output-junit scraper_ctest.xml --no-compress-output
  artifacts:
    reports:
      junit: $BUILD_PATH/gcc/release/services/scraper/scraper_ctest.xml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-test/m
  needs:
    - build_gcc
  
test_game_session:
  stage: test-long-running
  tags:
    - tests
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/gcc/release
  script:
    - ctest --test-dir $BUILD_PATH/gcc/release/services/game_session --output-on-failure --extra-verbose -j ${MAX_MULTI_THREADS_CORE}
      --output-junit game_session_ctest.xml --no-compress-output
  artifacts:
    reports:
      junit: $BUILD_PATH/gcc/release/services/game_session/game_session_ctest.xml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-test/m
  needs:
    - build_gcc

graph_dependencies:
  stage: documentation
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH/clang/debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=/usr/bin/clang++
      --graphviz=$BUILD_PATH/clang/debug/dependencies_graph.dot
    - dot -Tpng -o $BUILD_PATH/clang/debug/dependencies_graph.png $BUILD_PATH/clang/debug/dependencies_graph.dot
  artifacts:
    paths:
      - $BUILD_PATH/clang/debug/dependencies_graph.png
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/graph/m
  needs:
    - build_clang

packaging_linux:
  stage: packaging
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-linux-gcc:latest
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/gcc/release
  script:
    - cpack --config $PROJECT_PATH/MultiCPackConfigLinux.cmake
  artifacts:
    paths:
      - $BUILD_PATH/gcc/release/poker-bot*.tar.gz
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
  needs:
    - build_gcc
    - test_game_handler
    - test_ocr
    - test_scraper
    - test_game_session

packaging_windows:
  stage: packaging
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-linux-mingw:latest
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH/mingw/release
  script:
    - cpack --config $PROJECT_PATH/MultiCPackConfigWindows.cmake
  artifacts:
    paths:
      - $BUILD_PATH/mingw/release/poker-bot*.zip
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
  needs:
    - build_mingw
    # @todo : Add tests for windows

deploy:
  stage: deploy
  image: registry.gitlab.laneuville.me/poker-bot/backend/ci-deploy:latest
  script:
    # For fetching the tags with the following `git describe`
    # @todo test GIT_FETCH_EXTRA_FLAGS: --force --prune --prune-tags --tags as gitlab vars
    - git fetch --unshallow && git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git fetch origin
    - NEW_VERSION=$(cat VERSION.txt)
    - GIT_VERSION=$(git describe --tags | grep -P '\d+\.\d+\.\d+' -o)
    - if [ "${NEW_VERSION}" = "`echo -e "${NEW_VERSION}\n${GIT_VERSION}" | sort -V | head -n1`" ]; then
      echo "VERSION.txt (${NEW_VERSION}) is lower or equals to current git version tag (${GIT_VERSION})." && exit 1
      fi
    - echo "Creating release for ${CI_PROJECT_NAME} v${NEW_VERSION}"
    - gitlab-artifacts download build_gcc build_mingw
    - git tag ${NEW_VERSION}
    - git push --tags
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
      when: manual
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
  needs:
    - packaging_linux
    - packaging_windows
