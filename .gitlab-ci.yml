stages:
  - build
  - check
  - lint
  - test
  - documentation
  - packaging
  - deploy

variables:
  PROJECT_PATH: $CI_PROJECT_DIR
  BUILD_PATH_LINUX: ${PROJECT_PATH}/build-linux
  BUILD_PATH_WINDOWS: ${PROJECT_PATH}/build-windows
  MAX_CODE_QUALITY_ISSUE_PER_FILE: 20

default:
  image: registry.gitlab.laneuville.me/poker-bot/backend/ci-linux-runner:latest
  tags:
    - host
    - runner
  cache:
    # Enable per-branch caching
    key: $CI_COMMIT_REF_SLUG
    paths:
      - $BUILD_PATH_LINUX-debug

build_linux:
  stage: build
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-linux-gcc:latest
  tags:
    - build
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTS=ON --log-context
    - cmake --build $BUILD_PATH_LINUX-release
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX-debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTS=ON --log-context
    - cmake --build $BUILD_PATH_LINUX-debug
  artifacts:
    paths:
      - $BUILD_PATH_LINUX-release
      - $BUILD_PATH_LINUX-debug
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-windows\-only/m
      when: never
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m

build_windows:
  stage: build
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-windows-mingw:latest
  tags:
    - build
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_WINDOWS-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_TOOLCHAIN_FILE=cmake/mingw-w64-x86_64.cmake
    - cmake --build $BUILD_PATH_WINDOWS-release
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_WINDOWS-debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=/usr/bin/make
      -DCMAKE_TOOLCHAIN_FILE=cmake/mingw-w64-x86_64.cmake
    - cmake --build $BUILD_PATH_WINDOWS-debug
  artifacts:
    paths:
      - $BUILD_PATH_WINDOWS-release
      - $BUILD_PATH_WINDOWS-debug
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-windows/m
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m

clang_check:
  stage: check
  image: registry.gitlab.laneuville.me/poker-bot/backend/ci-linux-runner:latest
  cache: [ ] # Needed to make a new CMake build without cache about CXX compiler
  dependencies: [ ] # Needed to make a new CMake build without cache about CXX compiler
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX-debug -DCMAKE_CXX_COMPILER=/usr/local/bin/clang++
      -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON --log-context
    - cmake --build $BUILD_PATH_LINUX-debug
    - CPP_SRC_FILES=$(find ${PROJECT_PATH}/services -regex '.*\.\(cpp\|hpp\)' | tr "\n" " ")
    - echo "CPP_SRC_FILES=${CPP_SRC_FILES}" >> vars.env
    - clang-check -analyze -extra-arg=-std=c++20 -p $BUILD_PATH_LINUX-debug --analyzer-output-path=${PROJECT_PATH}/clang-check-report.plist ${CPP_SRC_FILES}
  artifacts:
    reports:
      dotenv: vars.env
    paths:
      - clang-check-report.plist
      - $BUILD_PATH_LINUX-debug
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-lint/m || $CI_COMMIT_MESSAGE !~ /\/no\-code\-quality/m || $CI_COMMIT_MESSAGE !~ /\/no\-test/m

clang_format:
  stage: lint
  script:
    - clang-format --Werror --Wclang-format-violations --dry-run $CPP_SRC_FILES
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-lint/m
  needs:
    - clang_check

code_quality:
  stage: test
  tags:
    - code-quality
  script:
    - CodeChecker analyze $BUILD_PATH_LINUX-debug/compile_commands.json -o $BUILD_PATH_LINUX-debug/code_checker_report
      -j 8 --ctu --tidy-config $PROJECT_PATH/.clang-tidy --skip $PROJECT_PATH/.code-checker-skip-files
    - set +e
    - CodeChecker parse $BUILD_PATH_LINUX-debug/code_checker_report -e html -o $BUILD_PATH_LINUX-debug/code_checker_html_report --trim-path-prefix $PROJECT_PATH
    - CodeChecker parse $BUILD_PATH_LINUX-debug/code_checker_report -e codeclimate -o $BUILD_PATH_LINUX-debug/gl-code-quality-report.json --trim-path-prefix $PROJECT_PATH
    - exit 0
  artifacts:
    name: code_quality_${CI_COMMIT_TIMESTAMP}
    paths:
      - $BUILD_PATH_LINUX-debug/gl-code-quality-report.json
      - $BUILD_PATH_LINUX-debug/code_checker_html_report/
    expose_as: 'Code quality HTML and json reports'
    reports:
      codequality: $BUILD_PATH_LINUX-debug/gl-code-quality-report.json
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-code\-quality/m
  needs:
    - clang_check

test_game_handler:
  stage: test
  tags:
    - tests
  script:
    # @fixme Need to required tests for all subproject with --test-dir
    - ctest --test-dir $BUILD_PATH_LINUX-debug/services/game_handler --output-on-failure --extra-verbose -j $(nproc)
      --output-junit game_handler_ctest.xml --no-compress-output
  artifacts:
    reports:
      junit: $BUILD_PATH_LINUX-debug/services/game_handler/game_handler_ctest.xml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-test/m
  needs:
    - clang_check

test_ocr:
  stage: test
  tags:
    - tests
  script:
    # @fixme Need to required tests for all subproject with --test-dir
    - ctest --test-dir $BUILD_PATH_LINUX-debug/services/ocr --output-on-failure --extra-verbose -j $(nproc)
      --output-junit ocr_ctest.xml --no-compress-output
  artifacts:
    reports:
      junit: $BUILD_PATH_LINUX-debug/services/ocr/ocr_ctest.xml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/(build|packaging)\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\/no\-test/m
  needs:
    - clang_check

graph_dependencies:
  stage: documentation
  script:
    - cmake -S $PROJECT_PATH -B $BUILD_PATH_LINUX-debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=/usr/local/bin/clang++
      --graphviz=dependencies_graph.dot
    - dot -Tpng -o $BUILD_PATH_LINUX-debug/dependencies_graph.png $BUILD_PATH_LINUX-debug/dependencies_graph.dot
  artifacts:
    paths:
      - $BUILD_PATH_LINUX-debug/dependencies_graph.png
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/graph/m
  needs:
    - clang_check

packaging_linux:
  stage: packaging
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-linux-gcc:latest
  script:
    - cpack --config $PROJECT_PATH/MultiCPackConfigLinux.cmake
  artifacts:
    paths:
      - $BUILD_PATH_LINUX-release/poker-bot*.tar.gz
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
  needs:
    - build_linux

packaging_windows:
  stage: packaging
  image: registry.gitlab.laneuville.me/poker-bot/backend/builder-windows-mingw:latest
  script:
    - cpack --config $PROJECT_PATH/MultiCPackConfigWindows.cmake
  artifacts:
    paths:
      - $BUILD_PATH_WINDOWS-release/poker-bot*.zip
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
  needs:
    - build_windows

deploy:
  stage: deploy
  image: registry.gitlab.laneuville.me/poker-bot/backend/ci-deploy:latest
  script:
    # For fetching the tags with the following `git describe`
    # @todo test GIT_FETCH_EXTRA_FLAGS: --force --prune --prune-tags --tags as gitlab vars
    - git fetch --unshallow && git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" && git fetch origin
    - NEW_VERSION=$(cat VERSION.txt)
    - GIT_VERSION=$(git describe --tags | grep -P '\d+\.\d+\.\d+' -o)
    - if [ "${NEW_VERSION}" = "`echo -e "${NEW_VERSION}\n${GIT_VERSION}" | sort -V | head -n1`" ]; then
      echo "VERSION.txt (${NEW_VERSION}) is lower or equals to current git version tag (${GIT_VERSION})." && exit 1
      fi
    - echo "Creating release for ${CI_PROJECT_NAME} v${NEW_VERSION}"
    - gitlab-artifacts download build_windows build_linux
    - git tag ${NEW_VERSION}
    - git push --tags
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\/build\-only/m
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\/packaging(\-only)?/m
      when: manual
    - if: $CI_COMMIT_BRANCH =~ /^(main|release)/
  needs:
    - packaging_linux
    - packaging_windows
