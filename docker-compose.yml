services:

  # ----------------------------------------------------- Builders -----------------------------------------------------

  builder-linux-gcc:
    build:
      context: .
      dockerfile: docker/Dockerfile-builder-linux-gcc
      args:
        - GCC_VERSION=${GCC_VERSION}
        - CMAKE_VERSION=${CMAKE_VERSION}
        - OPENJPEG_VERSION=${OPENJPEG_VERSION}
        - WEBP_VERSION=${WEBP_VERSION}
        - TIFF_VERSION=${TIFF_VERSION}
        - PNG_VERSION=${PNG_VERSION}
        - ZLIB_VERSION=${ZLIB_VERSION}
        - LEPTONICA_VERSION=${LEPTONICA_VERSION}
        - TESSERACT_VERSION=${TESSERACT_VERSION}
        - OPENCV_VERSION=${OPENCV_VERSION}
        - NLOHMANN_JSON_VERSION=${NLOHMANN_JSON_VERSION}
        - JSON_SCHEMA_VALIDATOR_VERSION=${JSON_SCHEMA_VALIDATOR_VERSION}
        - FMT_VERSION=${FMT_VERSION}
        - QUILL_VERSION=${QUILL_VERSION}
        - LIBUV_VERSION=${LIBUV_VERSION}
        - U_WEB_SOCKETS_VERSION=${U_WEB_SOCKETS_VERSION}
        - GOOGLETEST_VERSION=${GOOGLETEST_VERSION}
        - MAX_CPU_CORES=${MAX_CPU_CORES}
    image: ${REGISTRY_HOST}/${REGISTRY_USER}/${REPOSITORY_NAME}/builder-linux-gcc:latest

  builder-linux-clang:
    build:
      context: .
      dockerfile: docker/Dockerfile-builder-linux-clang
      args:
        - CI_REGISTRY=${REGISTRY_HOST}
        - CI_REGISTRY_ROOT_IMAGE=${REGISTRY_USER}/${REPOSITORY_NAME}/builder-linux-gcc
        - CLANG_VERSION=${CLANG_VERSION}
    image: ${REGISTRY_HOST}/${REGISTRY_USER}/${REPOSITORY_NAME}/builder-linux-clang:latest

  builder-linux-mingw:
    build:
      context: .
      dockerfile: docker/Dockerfile-builder-linux-mingw
      args:
        - GCC_VERSION=${GCC_VERSION}
        - CMAKE_VERSION=${CMAKE_VERSION}
        - MINGW_VERSION=${MINGW_VERSION}
        - BINUTILS_VERSION=${BINUTILS_VERSION}
        - OPENJPEG_VERSION=${OPENJPEG_VERSION}
        - WEBP_VERSION=${WEBP_VERSION}
        - TIFF_VERSION=${TIFF_VERSION}
        - PNG_VERSION=${PNG_VERSION}
        - ZLIB_VERSION=${ZLIB_VERSION}
        - LEPTONICA_VERSION=${LEPTONICA_VERSION}
        - TESSERACT_VERSION=${TESSERACT_VERSION}
        - OPENCV_VERSION=${OPENCV_VERSION}
        - NLOHMANN_JSON_VERSION=${NLOHMANN_JSON_VERSION}
        - JSON_SCHEMA_VALIDATOR_VERSION=${JSON_SCHEMA_VALIDATOR_VERSION}
        - FMT_VERSION=${FMT_VERSION}
        - QUILL_VERSION=${QUILL_VERSION}
        - LIBUV_VERSION=${LIBUV_VERSION}
        - U_WEB_SOCKETS_VERSION=${U_WEB_SOCKETS_VERSION}
        - GOOGLETEST_VERSION=${GOOGLETEST_VERSION}
        - MAX_CPU_CORES=${MAX_CPU_CORES}
    image: ${REGISTRY_HOST}/${REGISTRY_USER}/${REPOSITORY_NAME}/builder-linux-mingw:latest
    
  dev-env:
    build:
      context: .
      dockerfile: docker/Dockerfile-dev-env
      args:
        - CI_REGISTRY=${REGISTRY_HOST}
        - CI_REGISTRY_MINGW_BUILDER=${REGISTRY_USER}/${REPOSITORY_NAME}/builder-linux-mingw
        - CI_REGISTRY_ROOT_IMAGE=${REGISTRY_USER}/${REPOSITORY_NAME}/builder-linux-clang
        - MINGW_VERSION=${MINGW_VERSION}
        - BINUTILS_VERSION=${BINUTILS_VERSION}
        - GDB_VERSION=${GDB_VERSION}
    image: ${REGISTRY_HOST}/${REGISTRY_USER}/${REPOSITORY_NAME}/dev-env:latest

  ci-linux-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile-ci-linux-runner
      args:
        - CI_REGISTRY=${REGISTRY_HOST}
        - CI_REGISTRY_ROOT_IMAGE=${REGISTRY_USER}/${REPOSITORY_NAME}/builder-linux-clang
        - CLANG_VERSION=${CLANG_VERSION}
        - CPP_CHECK_VERSION=${CPP_CHECK_VERSION}
        - CODE_CHECKER_VERSION=${CODE_CHECKER_VERSION}
        - MAX_CPU_CORES=${MAX_CPU_CORES}
    image: ${REGISTRY_HOST}/${REGISTRY_USER}/${REPOSITORY_NAME}/ci-linux-runner:latest

  ci-deploy:
    build:
      context: .
      dockerfile: docker/Dockerfile-ci-deploy
    image: ${REGISTRY_HOST}/${REGISTRY_USER}/${REPOSITORY_NAME}/ci-deploy:latest

  # ---------------------------------------------------- Execution -----------------------------------------------------

  dev:
    image: ${REGISTRY_HOST}/${REGISTRY_USER}/${REPOSITORY_NAME}/dev-env:latest
    container_name: "linux_dev_env"
    ports:
      - "3022:22" # SSH
      - "9001:9001" # WS server
    tty: true
    stdin_open: true
    security_opt:
      - apparmor:unconfined
    environment:
      - DISPLAY=${DISPLAY}
    volumes:
      - .:/app
      - /tmp/.X11-unix:/tmp/.X11-unix
      - /run/user/1000:/run/user/1000
    entrypoint: docker/docker-entrypoint-dev.sh

  ci:
    image: ${REGISTRY_HOST}/${REGISTRY_USER}/${REPOSITORY_NAME}/ci-linux-runner:latest
    container_name: "linux_ci_runner"
    tty: true
    stdin_open: true
    volumes:
      - .:/app