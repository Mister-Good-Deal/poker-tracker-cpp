FROM ubuntu:22.04

WORKDIR /mnt

ENV MINGW=/mingw

ARG CMAKE_VERSION
ARG GCC_VERSION
ARG PKG_CONFIG_VERSION
ARG BINUTILS_VERSION
ARG MINGW_VERSION
ARG SDL_VERSION
ARG OPENCV_VERSION
ARG NLOHMANN_JSON_VERSION
ARG GOOGLETEST_VERSION
ARG MAX_CPU_CORES

SHELL [ "/bin/bash", "-c" ]

RUN set -ex \
    \
    # Global compilation lib tools
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get upgrade --no-install-recommends -y \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
        ca-certificates \
        gcc \
        g++ \
        zlib1g-dev \
        libssl-dev \
        libgmp-dev \
        libmpfr-dev \
        libmpc-dev \
        libisl-dev \
        libssl3 \
        libgmp10 \
        libmpfr6 \
        libmpc3 \
        libisl23 \
        xz-utils \
        ninja-build \
        texinfo \
        meson \
        gnupg \
        bzip2 \
        patch \
        gperf \
        bison \
        file \
        flex \
        make \
        yasm \
        wget \
        zip \
        git \
    \
    # Download source code for PKG_CONFIG, CMAKE, BINUTILS, MINGW, GCC and NASM
    && wget -q https://pkg-config.freedesktop.org/releases/pkg-config-${PKG_CONFIG_VERSION}.tar.gz -O - | tar -xz \
    && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz -O - | tar -xz \
    && wget -q https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VERSION}.tar.xz -O - | tar -xJ \
    && wget -q https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/mingw-w64-v${MINGW_VERSION}.tar.bz2 -O - | tar -xj \
    && wget -q https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.xz -O - | tar -xJ \
    \
    && mkdir -p ${MINGW}/include ${MINGW}/lib/pkgconfig \
    && chmod 0777 -R /mnt ${MINGW} \
    \
    # Install PKG_CONFIG
    && cd pkg-config-${PKG_CONFIG_VERSION} \
    && ./configure \
        --prefix=/usr/local \
        --with-pc-path=${MINGW}/lib/pkgconfig \
        --with-internal-glib \
        --disable-shared \
        --disable-nls \
    && make -j ${MAX_CPU_CORES} \
    && make install \
    && cd .. \
    \
    # Install CMAKE
    && cd cmake-${CMAKE_VERSION} \
    && ./configure \
        --prefix=/usr/local \
        --parallel=${MAX_CPU_CORES} \
    && make -j ${MAX_CPU_CORES} \
    && make install \
    && cd .. \
    \
    # Install BINUTILS
    && cd binutils-${BINUTILS_VERSION} \
    && ./configure \
        --prefix=/usr/local \
        --target=x86_64-w64-mingw32 \
        --disable-shared \
        --enable-static \
        --disable-lto \
        --disable-plugins \
        --disable-multilib \
        --disable-nls \
        --disable-werror \
        --with-system-zlib \
    && make -j ${MAX_CPU_CORES} \
    && make install \
    && cd .. \
    \
    # Install MINGW headers
    && mkdir mingw-w64 \
    && cd mingw-w64 \
    && ../mingw-w64-v${MINGW_VERSION}/mingw-w64-headers/configure \
        --prefix=/usr/local/x86_64-w64-mingw32 \
        --host=x86_64-w64-mingw32 \
        --enable-sdk=all \
    && make install \
    && cd .. \
    \
    # Install GCC
    && mkdir gcc \
    && cd gcc \
    && ../gcc-${GCC_VERSION}/configure \
        --prefix=/usr/local \
        --target=x86_64-w64-mingw32 \
        --enable-languages=c,c++ \
        --disable-shared \
        --enable-static \
        --enable-threads=posix \
        --with-system-zlib \
        --enable-libgomp \
        --enable-libatomic \
        --enable-graphite \
        --disable-libstdcxx-pch \
        --disable-libstdcxx-debug \
        --disable-multilib \
        --disable-lto \
        --disable-nls \
        --disable-werror \
    && make -j ${MAX_CPU_CORES} all-gcc \
    && make install-gcc \
    && cd .. \
    \
    # Install MINGW crt
    && cd mingw-w64 \
    && ../mingw-w64-v${MINGW_VERSION}/mingw-w64-crt/configure \
        --prefix=/usr/local/x86_64-w64-mingw32 \
        --host=x86_64-w64-mingw32 \
        --enable-wildcard \
        --disable-lib32 \
        --enable-lib64 \
    && (make || make || make || make) \
    && make install \
    && cd .. \
    \
    # Install MINGW winpthreads
    && cd mingw-w64 \
    && ../mingw-w64-v${MINGW_VERSION}/mingw-w64-libraries/winpthreads/configure \
        --prefix=/usr/local/x86_64-w64-mingw32 \
        --host=x86_64-w64-mingw32 \
        --enable-static \
        --disable-shared \
    && make -j ${MAX_CPU_CORES} \
    && make install \
    && cd .. \
    \
    # Recompile GCC
    && cd gcc \
    && make -j ${MAX_CPU_CORES} \
    && make install \
    && cd .. \
    \
    # Clean up downloaded source files
    && rm -r pkg-config-${PKG_CONFIG_VERSION} \
    && rm -r cmake-${CMAKE_VERSION} \
    && rm -r binutils-${BINUTILS_VERSION} \
    && rm -r mingw-w64 mingw-w64-v${MINGW_VERSION} \
    && rm -r gcc gcc-${GCC_VERSION}

# Install SDL with the given SDL_VERSION version from https://github.com/libsdl-org/SDL
RUN apt-get update && apt-get install -y libgtk-3-dev && \
    wget https://github.com/libsdl-org/SDL/archive/refs/tags/release-${SDL_VERSION}.tar.gz \
    -q -O /tmp/sdl-${SDL_VERSION}.tar.gz && \
    cd /tmp && tar -xvzf sdl-${SDL_VERSION}.tar.gz && cd SDL-release-${SDL_VERSION} && \
    mkdir build && cd build && ../configure && make -j ${MAX_CPU_CORES} && make install && \
    rm -rf /tmp/sdl-${SDL_VERSION}.tar.gz /tmp/SDL-release-${SDL_VERSION}

# Install OpenCV with the given OPENCV_VERSION from https://github.com/opencv/opencv
RUN apt-get install -y libgtkglext1-dev libopenjp2-7-dev && \
    wget https://github.com/opencv/opencv/archive/refs/tags/${OPENCV_VERSION}.tar.gz \
    -q -O /tmp/opencv-${OPENCV_VERSION}.tar.gz && \
    wget https://github.com/opencv/opencv_contrib/archive/refs/tags/${OPENCV_VERSION}.tar.gz \
    -q -O /tmp/opencv_contrib-${OPENCV_VERSION}.tar.gz && \
    cd /tmp && tar -xvzf opencv-${OPENCV_VERSION}.tar.gz && tar -xvzf opencv_contrib-${OPENCV_VERSION}.tar.gz && \
    cd opencv-${OPENCV_VERSION} && mkdir opencv_build && cd opencv_build && \
    cmake .. -DBUILD_LIST="core,highgui,imgcodecs,text" \
    -DOPENCV_EXTRA_MODULES_PATH="../../opencv_contrib-${OPENCV_VERSION}/modules" -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF \
    -DWITH_OPENCL=OFF && make -j ${MAX_CPU_CORES} && make install && \
    rm -rf /tmp/opencv-${OPENCV_VERSION}.tar.gz /tmp/opencv-${OPENCV_VERSION} /tmp/opencv_contrib-${OPENCV_VERSION}.tar.gz \
    /tmp/opencv_contrib-${OPENCV_VERSION}

# Install nlohmann_json with the given NLOHMANN_JSON_VERSION version from https://github.com/nlohmann/json
RUN wget https://github.com/nlohmann/json/archive/refs/tags/v${NLOHMANN_JSON_VERSION}.tar.gz \
    -q -O /tmp/json-${NLOHMANN_JSON_VERSION}.tar.gz && \
    cd /tmp && ls && tar -xvzf json-${NLOHMANN_JSON_VERSION}.tar.gz && cd json-${NLOHMANN_JSON_VERSION} && \
    mkdir build && cd build && cmake .. && make -j ${MAX_CPU_CORES} && make install && \
    rm -rf /tmp/json-${NLOHMANN_JSON_VERSION}.tar.gz /tmp/json-${NLOHMANN_JSON_VERSION}

# Install googleTest with the given GOOGLETEST_VERSION version from https://github.com/google/googletest
RUN wget https://github.com/google/googletest/archive/refs/tags/v${GOOGLETEST_VERSION}.tar.gz \
    -q -O /tmp/googletest-${GOOGLETEST_VERSION}.tar.gz && \
    cd /tmp && tar -xvzf googletest-${GOOGLETEST_VERSION}.tar.gz && cd googletest-${GOOGLETEST_VERSION} && \
    cmake . && make -j ${MAX_CPU_CORES} && make install && \
    rm -rf /tmp/googletest-${GOOGLETEST_VERSION}.tar.gz /tmp/googletest-${GOOGLETEST_VERSION}

# Clean ubuntu apt packages
RUN apt-get remove --purge -y file gcc g++ zlib1g-dev libssl-dev libgmp-dev libmpfr-dev libmpc-dev libisl-dev gnupg \
    && apt-get autoremove --purge -y \
    && apt-get clean

WORKDIR /app

CMD ["/bin/bash"]
