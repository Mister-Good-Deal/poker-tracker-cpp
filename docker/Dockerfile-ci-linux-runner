ARG CI_REGISTRY
ARG CI_REGISTRY_ROOT_IMAGE

FROM ${CI_REGISTRY}/${CI_REGISTRY_ROOT_IMAGE}:latest

ARG CLANG_VERSION
ARG CODE_CHECKER_VERSION
ARG CPP_CHECK_VERSION
ARG MAX_CPU_CORES

RUN apk add --no-cache clang${CLANG_VERSION}-headers git curl python3-dev py3-virtualenv py3-setuptools

# Install cpp-check with the given CPP_CHECK_VERSION version from https://github.com/danmar/cppcheck
RUN wget https://github.com/danmar/cppcheck/archive/refs/tags/${CPP_CHECK_VERSION}.tar.gz \
    -q -O /tmp/cppcheck-${CPP_CHECK_VERSION}.tar.gz && \
    cd /tmp && tar -xvzf cppcheck-${CPP_CHECK_VERSION}.tar.gz && cd cppcheck-${CPP_CHECK_VERSION} && \
    CXX=/usr/bin/clang++ CC=/usr/bin/clang cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DUSE_MATCHCOMPILER=ON \
    -DRUN_CLANG_TIDY_NAMES=/usr/bin/run-clang-tidy -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON && \
    cmake --build build -j ${MAX_CPU_CORES} && cmake --install build && \
    rm -rf /tmp/cppcheck-${CPP_CHECK_VERSION}.tar.gz /tmp/cppcheck-${CPP_CHECK_VERSION}

# Install codeChecker with the given CODE_CHECKER_VERSION version from https://github.com/Ericsson/codechecker
RUN wget https://github.com/Ericsson/codechecker/archive/refs/tags/v${CODE_CHECKER_VERSION}.tar.gz \
    -q -O /opt/codechecker-${CODE_CHECKER_VERSION}.tar.gz && \
    cd /opt && tar -xvzf codechecker-${CODE_CHECKER_VERSION}.tar.gz && cd codechecker-${CODE_CHECKER_VERSION} && \
    make venv && source $PWD/venv/bin/activate && pip install --upgrade setuptools && \
    BUILD_LOGGER_64_BIT_ONLY=YES BUILD_UI_DIST=NO make standalone_package && \
    rm -rf /opt/codechecker-${CODE_CHECKER_VERSION}.tar.gz

ENV PATH="${PATH}:/opt/codechecker-${CODE_CHECKER_VERSION}/build/CodeChecker/bin"

WORKDIR /app

CMD ["/bin/bash"]
