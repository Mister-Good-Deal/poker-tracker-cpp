FROM gcc:bullseye

ARG CMAKE_VERSION
ARG CLANG_VERSION
ARG CODE_CHECKER_VERSION
ARG CPP_CHECK_VERSION
ARG MAX_CPU_CORES

RUN apt-get update && apt-get install -y git python3-dev python3-venv python3-setuptools

# Install CMake with the given CMAKE_VERSION version from https://github.com/Kitware/CMake
RUN wget https://gitlab.kitware.com/cmake/cmake/-/archive/v${CMAKE_VERSION}/cmake-v${CMAKE_VERSION}.tar.gz \
    -q -O /tmp/cmake-v${CMAKE_VERSION}.tar.gz && \
    cd /tmp && tar -xvzf cmake-v${CMAKE_VERSION}.tar.gz && cd cmake-v${CMAKE_VERSION} && \
    ./bootstrap --parallel=${MAX_CPU_CORES} -- -DCMAKE_USE_OPENSSL=ON && make -j ${MAX_CPU_CORES} && make install && \
    rm -rf /tmp/cmake-v${CMAKE_VERSION}.tar.gz /tmp/cmake-v${CMAKE_VERSION}

# Install Clang with the given CLANG_VERSION version from https://github.com/llvm/llvm-project
RUN git clone https://github.com/llvm/llvm-project.git && cd llvm-project && git checkout llvmorg-${CLANG_VERSION} && \
    cmake -S llvm -B build -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" && \
    cmake --build build -j ${MAX_CPU_CORES} && cmake --install build && \
    cd .. && rm -rf llvm-project

# Install cpp-check with the given CPP_CHECK_VERSION version from https://github.com/danmar/cppcheck
RUN wget https://github.com/danmar/cppcheck/archive/refs/tags/${CPP_CHECK_VERSION}.tar.gz \
    -q -O /tmp/cppcheck-${CPP_CHECK_VERSION}.tar.gz && \
    cd /tmp && tar -xvzf cppcheck-${CPP_CHECK_VERSION}.tar.gz && cd cppcheck-${CPP_CHECK_VERSION} && \
    mkdir build && cd build && cmake .. && make -j ${MAX_CPU_CORES} && make install && \
    rm -rf /tmp/cppcheck-${CPP_CHECK_VERSION}.tar.gz /tmp/cppcheck-${CPP_CHECK_VERSION}

# Install codeChecker with the given CODE_CHECKER_VERSION version from https://github.com/Ericsson/codechecker
RUN wget https://github.com/Ericsson/codechecker/archive/refs/tags/v${CODE_CHECKER_VERSION}.tar.gz \
    -q -O /opt/codechecker-${CODE_CHECKER_VERSION}.tar.gz && \
    cd /opt && tar -xvzf codechecker-${CODE_CHECKER_VERSION}.tar.gz && cd codechecker-${CODE_CHECKER_VERSION} && \
    BUILD_LOGGER_64_BIT_ONLY=YES BUILD_UI_DIST=NO make standalone_package && \
    rm -rf /opt/codechecker-${CODE_CHECKER_VERSION}.tar.gz

ENV PATH="${PATH}:/opt/codechecker-${CODE_CHECKER_VERSION}/build/CodeChecker/bin"

WORKDIR /app

CMD ["/bin/bash"]
